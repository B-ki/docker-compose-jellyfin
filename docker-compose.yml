version: "3.9"
services:

  nginx-proxy:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx
    restart: unless-stopped
    ports:
      - '40080:80'
      - '40081:81'
      - '40443:443'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    networks:
      - nginx-network

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: unless-stopped
    user: ${PUID}:${PGID}
    volumes:
      - ${JELLYFIN_CONFIG_PATH}:/config
      - ${JELLYFIN_CACHE_PATH}:/cache
      - ${MEDIA_PATH}:/media
    networks: 
      - nginx-network
      - jellyfin-network
    ports:
      - '8096:8096'

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ./sonarr:/config
      - ${DATA_PATH}:/data
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
       - "8989:8989"
    networks: 
      - nginx-network
      - arr-network

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr:/config
      - ${DATA_PATH}:/data
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
      - "7878:7878"
    networks: 
      - nginx-network
      - arr-network

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ./prowlarr:/config
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
      - "9696:9696"
    networks: 
      - nginx-network
      - arr-network

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Etc/UTC
    volumes:
      - ./bazarr:/config
      - ${MOVIE_MEDIA_PATH}:/movies
      - ${TV_MEDIA_PATH}:/tv
      - '/var/run/docker.sock:/var/run/docker.sock'
    ports:
      - "6767:6767"
    restart: unless-stopped
    networks:
      - nginx-network
      - arr-network

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
    volumes:
      - ./qbittorrent:/config
      - ${DOWNLOAD_PATH}:/data/torrents
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
      - 8080:8080
    networks: 
      - nginx-network
      - arr-network

  fail2ban:
    container_name: fail2ban
    image: crazymax/fail2ban:latest
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - F2B_LOG_LEVEL=INFO
      - F2B_LOG_TARGET=STDOUT
      - F2B_DB_PURGE_AGE=365d
        # - SSMTP_HOST=smtp.example.com
        # - SSMTP_PORT=587
        # - SSMTP_HOSTNAME=example.com
        # - SSMTP_USER=smtp@example.com
        # - SSMTP_PASSWORD=
        # - SSMTP_TLS=YES
    volumes:
      - ./fail2ban/data:/data
      - /var/log:/var/log:ro
        # - /path/to/overseerr/log:/remotelogs/overseerr:ro #optional
      - ./data/logs/:/log/npm/:ro
        # - ./prowlarr/logs:/remotelogs/prowlarr:ro 
        # - ./radarr/logs:/remotelogs/radarr:ro #optional
        # - ./sonarr/logs:/remotelogs/sonarr:ro #optional
      - ./jellyfin/log:/remotelogs/jellyfin:ro #optional
    restart: unless-stopped

  uptimekuma:
    container_name: uptimekuma
    image: louislam/uptime-kuma:1
    ports:
      - 3001:3001
    volumes:
      - ./uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  flaresolverr:
    container_name: flaresolverr
    image: ghcr.io/flaresolverr/flaresolverr:latest
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=Europe/London
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
      - '8191:8191'
    networks:
      - arr-network 

  wg-easy:
    container_name: wg-easy
    image: ghcr.io/wg-easy/wg-easy
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - WG_HOST=${SERVER_IP}
      - PASSWORD=${WG_ADMIN_PASSWORD}
    volumes:
      - '~/.wg-easy:/etc/wireguard'
    ports:
      - 51820:51820/udp
      - 51821:51821/tcp
    restart: unless-stopped
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    networks:
      - nginx-network



networks:
  nginx-network:
    driver: bridge
  jellyfin-network:
    driver: bridge
  arr-network:
    driver: bridge
