services:

  nginx-proxy:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx
    restart: unless-stopped
    ports:
      - '40080:80'
      - '40081:81'
      - '40443:443'
    volumes:
      - ./npm:/data
      - ./letsencrypt:/etc/letsencrypt
    networks:
      - nginx-network

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: unless-stopped
    user: ${PUID}:${PGID}
    volumes:
      - ${JELLYFIN_CONFIG_PATH}:/config
      - ${JELLYFIN_CACHE_PATH}:/cache
      - ${MEDIA_PATH}:/media
    networks: 
      - nginx-network
      - jellyfin-network
    ports:
      - '8096:8096'

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ./sonarr:/config
      - ${DATA_PATH}:/data
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
       - "8989:8989"
    networks: 
      - nginx-network
      - arr-network

  sonarr_anime:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr_anime
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ./sonarr_anime:/config
      - ${DATA_PATH}:/data
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
       - "48989:8989"
    networks: 
      - nginx-network
      - arr-network

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr:/config
      - ${DATA_PATH}:/data
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
      - "7878:7878"
    networks: 
      - nginx-network
      - arr-network

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    ports:
      - 5055:5055
    volumes:
      - ./jellyfseer:/app/config
    restart: unless-stopped
    networks:
      - nginx-network
      - arr-network

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ./prowlarr:/config
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
      - "9696:9696"
    dns:
      - 9.9.9.9
      - 208.67.222.222
      - 1.1.1.1
      - 2620:fe::9
      - 2620:fe::10
      - 2606:4700:4700::1111
    networks: 
      - nginx-network
      - arr-network

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Etc/UTC
    volumes:
      - ./bazarr:/config
      - ${MOVIE_MEDIA_PATH}:/movies
      - ${TV_MEDIA_PATH}:/tv
      - '/var/run/docker.sock:/var/run/docker.sock'
    ports:
      - "6767:6767"
    restart: unless-stopped
    networks:
      - nginx-network
      - arr-network

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
    volumes:
      - ./qbittorrent:/config
      - ${DOWNLOAD_PATH}:/data/torrents
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
      - 8080:8080
    networks: 
      - nginx-network
      - arr-network

  fail2ban:
    container_name: fail2ban
    image: crazymax/fail2ban:latest
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - F2B_LOG_TARGET=STDOUT
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=365d
      - IPTABLES_MODE=auto 
    volumes:
      - "./fail2ban/:/data/"
      - "./npm/logs/:/log/npm/:ro"
      - ${JELLYFIN_CONFIG_PATH}/log:/log/jellyfin/:ro #optional
    restart: unless-stopped

  flaresolverr:
    container_name: flaresolverr
    image: ghcr.io/flaresolverr/flaresolverr:latest
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=Europe/London
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: unless-stopped
    ports:
      - '8191:8191'
    networks:
      - arr-network 

  wg-easy:
    container_name: wg-easy
    image: ghcr.io/wg-easy/wg-easy
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - WG_HOST=${SERVER_IP}
      - PASSWORD_HASH=$$2a$$12$$c1aJzAAC.CMCRKyJGbeqaevgX39884za3Qoo8.oPtPArrNXOKotZy
    volumes:
      - '.wg-easy:/etc/wireguard'
    ports:
      - 51820:51820/udp
      - 51821:51821/tcp
    restart: unless-stopped
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    networks:
      - nginx-network

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    ports:
      - "3100:3100"
    volumes:
    - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log
      - ./sonarr/logs/:/logs/sonarr
      - ./sonarr_anime/logs/:/logs/sonarr_anime
      - ./radarr/logs/:/logs/radarr
      - /home/bkipi/jellyfin-config/log:/logs/jellyfin
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - monitoring-network

  grafana:
    container_name: grafana
    user: "1001:1001"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    volumes:
      - ./grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring-network

networks:
  nginx-network:
    driver: bridge
  jellyfin-network:
    driver: bridge
  arr-network:
    driver: bridge
  monitoring-network:
    driver: bridge
